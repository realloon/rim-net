{
  "posts": [
    {
      "id": "1",
      "author": "张明",
      "title": "深入理解 React Hooks 原理",
      "content": "React Hooks 自推出以来彻底改变了函数组件的开发方式。本文将深入剖析 useState、useEffect 等核心 Hook 的实现机制。首先我们需要理解 Fiber 架构下 Hook 的存储方式，每个函数组件对应一个 fiber 节点，hooks 以链表形式存储在 fiber 的 memoizedState 属性中...",
      "chats": 2450,
      "likes": 186,
      "createdAt": 1750822346022,
      "updatedAt": 1750822346022
    },
    {
      "id": "2",
      "author": "李思思",
      "title": "TypeScript 类型体操实战指南",
      "content": "TypeScript 的类型系统是图灵完备的！这意味着我们可以实现各种复杂的类型逻辑。本文将通过 10 个渐进式案例，带你掌握类型编程的核心技巧：1. 条件类型与 infer 关键字 2. 递归类型处理嵌套结构 3. 模板字面量类型实现字符串操作... 当我们处理深度嵌套的 API 响应类型时，可以使用递归类型实现自动拍平...",
      "chats": 3120,
      "likes": 254,
      "createdAt": 1750712346022,
      "updatedAt": 1750712346022
    },
    {
      "id": "3",
      "author": "王技术",
      "title": "2023 年前端性能优化全景图",
      "content": "在 5G 时代，用户对性能的期望更高。本文整合了最新的性能优化技术：1. 使用 Next.js 13 应用路由的流式渲染 2. 针对 Core Web Vitals 的优化策略 3. 新的性能指标 INP 解读。实验表明，使用 Partial Prerendering 技术可使 TTI 降低 40%... 需要注意的是，过度优化可能适得其反，应优先解决瓶颈问题...",
      "chats": 5870,
      "likes": 421,
      "createdAt": 1750702346022,
      "updatedAt": 1750702346022
    },
    {
      "id": "4",
      "author": "赵全栈",
      "title": "Node.js 多线程实战：Worker Threads 深度解析",
      "content": "虽然 Node.js 以单线程事件循环著称，但 Worker Threads 模块让我们可以突破 CPU 密集型任务的限制。本文将展示：1. 如何正确使用 worker_threads 模块 2. 线程间通信的最佳实践 3. 与 cluster 模块的对比选择。通过实际压测发现，对于图像处理类任务，使用 4 个工作线程可使吞吐量提升 3.8 倍... 但需要注意线程创建开销和内存隔离问题...",
      "chats": 1320,
      "likes": 97,
      "createdAt": 1701388800000,
      "updatedAt": 1701388800000
    },
    {
      "id": "5",
      "author": "陈设计",
      "title": "CSS 新特性：@layer 规则彻底改变样式架构",
      "content": "CSS Cascade Layers 是近年来最重要的 CSS 架构改进。通过 @layer 规则，我们可以：1. 定义明确的样式层级 2. 避免特异性战争 3. 创建可维护的设计系统。实践案例：定义基础层 > 组件层 > 工具层 > 主题层。重要结论：层优先级高于选择器特异性，这意味着 .btn 在工具层将始终覆盖组件层的 #special-button...",
      "chats": 2780,
      "likes": 203,
      "createdAt": 1701388800000,
      "updatedAt": 1701388800000
    },
    {
      "id": "6",
      "author": "周AI",
      "title": "使用 TensorFlow.js 在浏览器中实现实时姿态检测",
      "content": "Web ML 正在打开浏览器中的新可能。本文将逐步实现：1. 加载预训练的 MoveNet 模型 2. 处理摄像头视频流 3. 解析 17 个关键点数据。关键代码片段：async function detectPose() {\n\nconst model = await poseDetection.createDetector();\n\nconst poses = await model.estimatePoses(video);\n\n// 绘制骨骼连线...\n\n} 性能优化技巧包括降低输入分辨率和使用 WebGL 后端...",
      "chats": 4310,
      "likes": 325,
      "createdAt": 1701388800000,
      "updatedAt": 1701388800000
    }
  ],
  "comments": [
    {
      "id": "1",
      "postId": "1",
      "parentCommentId": null,
      "author": "cassdie",
      "content": "ahaha",
      "createdAt": 1750949029798,
      "likes": 66
    },
    {
      "id": "2",
      "postId": "1",
      "parentCommentId": "1",
      "author": "joy",
      "content": "a comment about post 1",
      "createdAt": 1750949129798,
      "likes": 12
    },
    {
      "id": "3",
      "postId": "1",
      "parentCommentId": null,
      "author": "bill",
      "content": "hello, maybe i am human.",
      "createdAt": 1750949229798,
      "likes": 33
    }
  ]
}
